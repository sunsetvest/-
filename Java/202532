2025/3/2

1.学习了java线程间的同步与通信，线程同步和与之相关的线程安全问题可以通过加锁来解决，可以对方法直接加同步锁synchronized或者
使用java.util.concurrent.locks包中ReentrantLock类来对一个临界资源加锁，线程通信可以用简单的生产消费者问题解释，当生产者
生产资源或消费者需要资源都可以申请临界资源（不可忽视需要的条件），一旦它们执行完毕就可以将其他进程用notifyall的方式唤醒，然后
自己调用wait方法使自己失去锁。

2.学习了线程池的创建方法，主要通过创建ThreadPoolExecutor对象实现，创建对象需要对应的七个参数，核心线程，临时线程，临时线程存活时间，
临时线程存活时间的单位，任务队列，线程工厂以及临时线程和核心线程都被占用还有任务队列已满调用的拒绝策略。线程池可以接收runnable和callable任务，
如pool.execute(parameter)以及pool.submit(new MyCallable(patameter)).

3.学习了单元测试方法，主要通过调用Junit包中的@Test注解实现，对于JUnit4，@Before,@After分别表示该方法在所有测试前（或后）都调用一次，而
@BeforeClass,@AfterClass则只执行一次。

4.学习了如何自定义注解，主要创建notation文件并且用@Target，@Retention分别规定该注解的作用对象以及存活时间，调用时则在注解后的括号内规定未被
默认定义的变量即可。

